//
//  ContentView.swift
//  BetterRest
//
//  Created by Jonathan Webb on 9/27/22.
//

import CoreML
import SwiftUI

struct ContentView: View {
    @State private var wakeUp = defaultWakeTime
    @State private var sleepAmount = 8.0
    @State private var coffeeAmount = 1
    
    @State private var alertTitle = ""
    @State private var alertMessage = ""
    @State private var showingAlert = false
    @State private var bedTime = Date.now
    static var defaultWakeTime: Date {
        var components = DateComponents()
        components.hour = 8
        components.minute = 0
        return Calendar.current.date(from: components) ?? Date.now
    }
    
    var body: some View {
        NavigationView{
            Form{
                Section{}
                Section{
                    Text("You should go to bed by \(bedTime.formatted(date: .omitted, time: .shortened))")
                        .font(.title2)
                }
                Section{
                    
                    //VStack(alignment: .leading, spacing: 0) {
                    Text("When do you want to wake up")
                        .font(.headline)
                    
                    DatePicker("Please enter a time", selection: $wakeUp, displayedComponents: .hourAndMinute)
                        .labelsHidden()
                        .onChange(of: wakeUp, perform: calculateBedTime)
                }
                Section{
                    //VStack(alignment: .leading, spacing: 0) {
                    Text("Desired amount of sleep")
                        .font(.headline)
                    
                    Stepper("\(sleepAmount.formatted()) hours", value: $sleepAmount, in: 4...12, step: 0.25)
                        .onChange(of: sleepAmount, perform: calculateBedTime)
                }
                Section{
                    //VStack(alignment: .leading, spacing: 0) {
                    Text("Daily coffee intake")
                        .font(.headline)
                    Picker("Cups", selection: $coffeeAmount) {
                        ForEach(1..<20) {
                            Text("\($0) Cups")
                                .onChange(of: coffeeAmount, perform: calculateBedTime)
                        }
                    }
                    //Stepper(coffeeAmount == 1 ? "1 cup" : "\(coffeeAmount) cups)", value: $coffeeAmount, in: 1...20)
                }
            }
            .navigationTitle("BetterRest")
            //.toolbar {
            //Button("Calculate", action: calculateBedTime)
            //}
            //.alert(alertTitle, isPresented: $showingAlert) {
            //Button("OK"){}
            // }message: {
            //Text(alertMessage)
        }
    }
    
    func calculateBedTime<T: Equatable>(newValue: T) {
        do {
            let config = MLModelConfiguration()
            let model = try SleepCalculator(configuration: config)
            let componants = Calendar.current.dateComponents([.hour, .minute], from: wakeUp)
            let hour = (componants.hour ?? 0) * 60 * 60
            let minute = (componants.minute ?? 0) * 60
            
            let prediction = try model.prediction(wake: Double(hour + minute), estimatedSleep: sleepAmount, coffee: Double(coffeeAmount))
            let sleepTime = wakeUp - prediction.actualSleep
            bedTime = sleepTime
            //alertTitle = "Your ideal bedtime is..."
            //alertMessage = sleepTime.formatted(date: .omitted, time: .shortened)
        } catch {
            //alertTitle = "Error"
            //alertMessage = "Sorry there was a problem calculating your bedtime."
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
